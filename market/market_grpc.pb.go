// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: market.proto

package starfish_market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	// A simple RPC to make a request to the server to retrieve a file.
	// Message MarketRequestArgs contains the information for the request.
	// Message MarketRequestInfo is returned to indicate that the request was received and contains information
	// about the request such as the bid, the file digest, the uuid of the transaction, and the public key of the requesting person.
	ConsumerRetrieveRequest(ctx context.Context, in *MarketRequestArgs, opts ...grpc.CallOption) (*MarketRequestInfo, error)
	// A simple RPC to make a query to the market for a specific file.
	// Message MarketQueryArgs contains the specific file digest to query.
	// Message MarketQueryList contains an 'array' of MarketRequestInfo messages which are the current requests.
	ProducerQuery(ctx context.Context, in *MarketQueryArgs, opts ...grpc.CallOption) (*MarketQueryList, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) ConsumerRetrieveRequest(ctx context.Context, in *MarketRequestArgs, opts ...grpc.CallOption) (*MarketRequestInfo, error) {
	out := new(MarketRequestInfo)
	err := c.cc.Invoke(ctx, "/Market/ConsumerRetrieveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ProducerQuery(ctx context.Context, in *MarketQueryArgs, opts ...grpc.CallOption) (*MarketQueryList, error) {
	out := new(MarketQueryList)
	err := c.cc.Invoke(ctx, "/Market/ProducerQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	// A simple RPC to make a request to the server to retrieve a file.
	// Message MarketRequestArgs contains the information for the request.
	// Message MarketRequestInfo is returned to indicate that the request was received and contains information
	// about the request such as the bid, the file digest, the uuid of the transaction, and the public key of the requesting person.
	ConsumerRetrieveRequest(context.Context, *MarketRequestArgs) (*MarketRequestInfo, error)
	// A simple RPC to make a query to the market for a specific file.
	// Message MarketQueryArgs contains the specific file digest to query.
	// Message MarketQueryList contains an 'array' of MarketRequestInfo messages which are the current requests.
	ProducerQuery(context.Context, *MarketQueryArgs) (*MarketQueryList, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) ConsumerRetrieveRequest(context.Context, *MarketRequestArgs) (*MarketRequestInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumerRetrieveRequest not implemented")
}
func (UnimplementedMarketServer) ProducerQuery(context.Context, *MarketQueryArgs) (*MarketQueryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducerQuery not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_ConsumerRetrieveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequestArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ConsumerRetrieveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Market/ConsumerRetrieveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ConsumerRetrieveRequest(ctx, req.(*MarketRequestArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ProducerQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketQueryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ProducerQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Market/ProducerQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ProducerQuery(ctx, req.(*MarketQueryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsumerRetrieveRequest",
			Handler:    _Market_ConsumerRetrieveRequest_Handler,
		},
		{
			MethodName: "ProducerQuery",
			Handler:    _Market_ProducerQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market.proto",
}
